<?php

namespace Glsr\GestockBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    public function getArticles($nbPerPage, $page)
    {
        // On ne sait pas combien de pages il y a
        // Mais on sait qu'une page doit être supérieure ou égale à 1
        // Bien sûr pour le moment on ne se sert pas (encore !) de cette variable
        if ($page < 1) {
            // On déclenche une exception InvalidArgumentException
            // Cela va afficher la page d'erreur 404
            // On pourra la personnaliser plus tard
            throw new \InvalidArgumentException('l\'argument $page ne peut être inférieur à 1 (valeur : "'.$page.'").');
        }
        
        $query = $this->createQueryBuilder('a')
            ->leftjoin('a.supplier', 's')
            ->addSelect('s')
            ->leftjoin('a.familylog', 'f')
            ->addSelect('fl')
            ->leftJoin('a.subfamilylog', 'sf')
            ->addSelect('sfl')
            ->leftJoin('a.unitstorage', 'u')
            ->addSelect('u')
            ->leftJoin('a.zonestorage', 'z')
            ->addSelect('z')
            ->where('a.active = 1')
            ->orderBy('a.name', 'ASC')
            ->getQuery();
        
        // On définit l'article à partir duquel commencer la liste
        $query->setFirstResult(($page - 1) * $nbPerPage)
            ->setMaxResults($nbPerPage); // Ainsi que le nombre d'article à afficher
        
        // Et enfin, on retourne l'objet Paginator correspondant à la requête construite
        return new Paginator($query);
    }
}
