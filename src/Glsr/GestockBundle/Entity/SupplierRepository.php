<?php

namespace Glsr\GestockBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * SupplierRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SupplierRepository extends EntityRepository
{
    public function getSuppliers($nbPerPage, $page)
    {
        // On ne sait pas combien de pages il y a
        // Mais on sait qu'une page doit être supérieure ou égale à 1
        // Bien sûr pour le moment on ne se sert pas (encore !) de cette variable
        if ($page < 1) {
            // On déclenche une exception InvalidArgumentException
            // Cela va afficher la page d'erreur 404
            // On pourra la personnaliser plus tard
            throw new \InvalidArgumentException(
                'l\'argument $page ne peut être inférieur à 1 (valeur : "'.$page.'").'
            );
        }
        
        $query = $this->createQueryBuilder('s')
            ->where('s.active = 1')
            ->orderBy('s.name', 'ASC')
            ->getQuery();
        
        // On définit l'article à partir duquel commencer la liste
        $query->setFirstResult(($page - 1) * $nbPerPage)
            ->setMaxResults($nbPerPage); // Ainsi que le nombre d'article à afficher
        
        // Et enfin, on retourne l'objet Paginator correspondant à la requête construite
        return new Paginator($query);
    }
    
    public function getSupplierForReassign($article)
    {
//        var_dump($article);
        $query = $this->createQueryBuilder('s')
            ->where('s.name != :idname')
            ->andWhere('s.family_log = :flname')
            ->andWhere('s.sub_family_log = :sflname')
            ->andWhere('s.active = 1')
            ->setParameters(array(
                'idname'  => $article->getSupplier()->getName(),
                'flname'  => $article->getFamilyLog(),
                'sflname' => $article->getSubFamilyLog()
                ))
            ->orderBy('s.name', 'ASC');
        
        return $query;
    }
}
