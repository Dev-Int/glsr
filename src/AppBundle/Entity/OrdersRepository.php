<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Query\Parameter;

/**
 * OrdersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrdersRepository extends EntityRepository
{
    /**
     * Renvoi les dernières commandes.
     *
     * @param integer $count Nombre d'élément à afficher
     * @return array Query result
     */
    public function getLastOrder($count)
    {
        $query = $this->findOrders()
            ->setMaxResults($count)
            ->getQuery();

        return $query->getResult();
    }

    /**
     * Renvoi les dernières commandes.
     *
     * @param integer $count Nombre d'élément à afficher
     * @return array Query result
     */
    public function getLastDelivery($count)
    {
        $query = $this->findDeliveries()
            ->setMaxResults($count)
            ->getQuery();

        return $query->getResult();
    }

    /**
     * Renvoi les dernières commandes.
     *
     * @param integer $count Nombre d'élément à afficher
     * @return array Query result
     */
    public function getLastInvoice($count)
    {
        $query = $this->findInvoices()
            ->setMaxResults($count)
            ->andWhere('o.status = 2')
            ->getQuery();

        return $query->getResult();
    }

    /**
     * Find Orders before delivering.
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function findOrders()
    {
        $query = $this->createQueryBuilder('o')
            ->orderBy('o.id', 'DESC')
            ->where('o.delivdate > :date')
            ->andWhere('o.status = :status')
            ->setParameters(new ArrayCollection([new Parameter('date', date('Y-m-d')), new Parameter('status', 1)]));

        return $query;
    }

    /**
     * Find Orders for delivering.
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function findDeliveries()
    {
        $query = $this->createQueryBuilder('o')
            ->orderBy('o.id', 'DESC')
            ->where('o.delivdate <= :date')
            ->andWhere('o.status = :status')
            ->setParameters(new ArrayCollection([new Parameter('date', date('Y-m-d')), new Parameter('status', 1)]));

        return $query;
    }

    /**
     * Find Orders for billing.
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function findInvoices()
    {
        $query = $this->createQueryBuilder('o')
            ->orderBy('o.id', 'DESC')
            ->where('o.delivdate < :date')
            ->andWhere('o.status > :status')
            ->setParameters(new ArrayCollection([new Parameter('date', date('Y-m-d')), new Parameter('status', 1)]));

        return $query;
    }
}
