security:
  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    app_user_provider:
      entity:
        class: 'Core\Domain\Model\User'
        property: username

  encoders:
    Core\Domain\Model\User:
      algorithm: auto

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt))/
      security: false

    login:
      pattern:   ^/api/(login|public)
      stateless: true
      anonymous: true
      user_checker: Core\Infrastructure\Security\UserChecker
      json_login:
        check_path:      /api/login_check
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
        require_previous_session: false

    api:
      pattern: ^/api
      stateless: true
      anonymous: false
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator

      logout:
        path: app_logout

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#firewalls-authentication

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # For use new experimental Security, which eventually replace security in Symfony 6.0
  # enable_authenticator_manager: true

  role_hierarchy:
    ROLE_ASSISTANT:   [ROLE_USER]
    ROLE_ADMIN:       [ROLE_ASSISTANT, ROLE_USER]
    ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/api/(login|public), roles: IS_AUTHENTICATED_ANONYMOUSLY }
#    - { path: ^/api/backend, roles: ROLE_ADMIN }
#    - { path: ^/api, roles: ROLE_USER }
#    - { path: ^/, roles: ROLE_USER }
