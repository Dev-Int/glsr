<?xml version="1.0" encoding="UTF-8"?>

<project name="Glsr" default="build">
    <property name="workspace" value="${env.WORKSPACE}" />

    <available property="composer.exists" file="${workspace}/composer.phar" />
    <target name="build"
  depends="prepare,vendors,parameters,lint,phploc,pdepend,phpcpd,phpmd-ci,phpcs-ci,phpdoc,phpunit,phpcb"/>

    <target name="build-parallel" depends="prepare,lint,tools-parallel,phpunit,phpcb"/>

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc"/>
            <antcall target="phpdoc"/>
        </parallel>
    </target>

    <target name="clean" description="Cleanup build artifacts">
        <delete dir="${workspace}/app/build/api"/>
        <delete dir="${workspace}/app/build/code-browser"/>
        <delete dir="${workspace}/app/build/coverage"/>
        <delete dir="${workspace}/app/build/logs"/>
        <delete dir="${workspace}/app/build/pdepend"/>
        <delete dir="${workspace}/app/build/docs/*"/>
    </target>

    <target name="prepare" depends="clean,vendors" description="Prepare for build">
        <mkdir dir="${workspace}/app/build/api"/>
        <mkdir dir="${workspace}/app/build/code-browser"/>
        <mkdir dir="${workspace}/app/build/coverage"/>
        <mkdir dir="${workspace}/app/build/logs"/>
        <mkdir dir="${workspace}/app/build/pdepend"/>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l" />

            <fileset dir="${workspace}/src">
                <include name="**/*.php" />
                <modified />
            </fileset>
            <fileset dir="${workspace}/src/">
                <include name="**/*Test.php" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="phploc">
            <arg value="--log-csv" />
            <arg value="${workspace}/app/build/logs/phploc.csv" />
            <arg path="${workspace}/src" />
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <exec executable="pdepend">
            <arg value="--jdepend-xml=${workspace}/app/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${workspace}/app/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${workspace}/app/build/pdepend/overview-pyramid.svg" />
            <arg path="${workspace}/src" />
        </exec>
    </target>

    <target name="phpmd"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpmd">
            <arg path="${workspace}/src" />
            <arg value="text" />
            <arg value="${workspace}/app/phpmd.xml" />
        </exec>
    </target>

    <target name="phpmd-ci"
            description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="phpmd">
            <arg path="${workspace}/src" />
            <arg value="xml" />
            <arg value="${workspace}/app/phpmd.xml" />
            <arg value="--reportfile" />
            <arg value="${workspace}/app/build/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcs"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpcs">
            <arg value="--standard=Symfony2" />
            <arg path="${workspace}/src" />
        </exec>
    </target>

    <target name="phpcs-ci"
            description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${workspace}/app/build/logs/checkstyle.xml" />
            <arg value="--standard=Symfony2" />
            <arg path="${workspace}/src" />
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="phpcpd">
            <arg value="--log-pmd" />
            <arg value="${workspace}/app/build/logs/pmd-cpd.xml" />
            <arg path="${workspace}/src" />
        </exec>
    </target>

    <target name="phpdoc" description="Generate API documentation using phpDox">
         <exec executable="phpdoc">
             <arg line="-d '${workspace}/src' -t '${workspace}/app/build/docs' --title='Tempo' " />
         </exec>
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="phpunit" failonerror="true">
            <arg value="-c" />
            <arg path="${workspace}/app/phpunit.xml" />
        </exec>
    </target>

    <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="phpcb">
            <arg value="--log" />
            <arg path="${workspace}/app/build/logs" />
            <arg value="--source" />
            <arg path="${workspace}/src" />
            <arg value="--output" />
            <arg path="${workspace}/app/build/code-browser" />
        </exec>
    </target>

    <!-- Add vendors or code will fail --> 
    <target name="vendors" depends="clean" description="Add Vendors">
    <exec executable="php" failonerror="true">
        <arg value='composer.phar' />
        <arg value='install' />
    </exec>
    </target>

    <target name="composer" unless="composer.exists">
        <get src="http://getcomposer.org/composer.phar" dest="${workspace}/composer.phar" />
        <chmod file="${workspace}/composer.phar" perm="775" />
    </target>

    <target name="parameters" description="Copy parameters">
        <exec executable="cp" failonerror="true">
            <arg path="app/config/parameters.jenkins.yml" />
            <arg path="app/config/parameters.yml" />
        </exec>
    </target>

</project>
